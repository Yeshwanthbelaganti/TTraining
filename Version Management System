A version Managementsystem (VMS) is a repository of files, often the files for the source code of computer programs, with monitored access. 
Every change made to the source is tracked, along with who made the change, why they made it, and references to problems fixed, or enhancements introduced, by the change.
In this problem we will consider a simplified model of a development project. Let's suppose that there are N source files in the project. 
All the source files are distinct and numbered from 1 to N.
A VMS which is used for maintaining the project contains two sequences of source files. The first sequence contains M source files that are ignored by the VMS.
If a source file is not in the first sequence, then it's considered to be unignored. The second sequence contains K source files that are tracked by the VMS.
If a source file is not in the second sequence, then it's considered to be untracked.
A source file can either be or not be in any of these two sequences.
Your task is to calculate two values: the number of source files of the project, that are both tracked and ignored, and the number of source files of the project,that are both untracked and unignored.
------------------------------------------------------------------------------------------------------------
#include<stdio.h>
int main()
{
    int n,m,k,i,j,l,c=0,cc=0;
    scanf("%d%d%d",&n,&m,&k);
    int a[m],b[k];
    for(i=0;i<m;i++)
    {
        scanf("%d",&a[i]);
    }
    for(i=0;i<k;i++)
    {
        scanf("%d",&b[i]);
    }
    for(i=0;i<m;i++)
    {
        for(j=0;j<k;j++)
        {
            if(a[i]==b[j]){c++;}
        }
    }
    for(i=1;i<=n;i++)
    {
        for(j=0;j<m;j++)
        {
            if(a[j]==i)
            {
                break;
            }
            if(j==m-1)
            {
                for(l=0;l<k;l++)
                {
                    if(b[l]==i)
                    {
                        break;
                    }
                    if(l==k-1){cc++;}
                }
            }
        }
    }
    printf("%d %d",c,cc);
    return 0;
}
