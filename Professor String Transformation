There are two professor(professor A and professor B). They are challenging with each other, like who is going to finish the task soon. 
The task is, given a string consisting of only A’s and B’s. They can transform the given string to another string by toggling any character. 
Thus many transformations of the given string are possible. The task is to find Weight of the maximum weight transformation.
Weight of string = Weight of total pairs + weight of single characters - Total number of toggles.
Two consecutive characters are considered as pair only if they are different. 
Weight of a single pair (both character are different) = 4
Weight of a single character = 1 
For Ex:
Input: str = "AA"
Output: 3
Transformations of given string are "AA", "AB", "BA" and "BB". Maximum weight transformation is "AB" or "BA". And weight is "One Pair - One Toggle" = 4-1 = 3.
==========================================================================================================
#include<bits/stdc++.h> 
using namespace std; 

// returning the max weight
int getMaxRec(string &str, int i, int n,int lookup[]) 
{ 
	// base case 
	if (i >= n) return 0; 

	if (lookup[i] != -1) return lookup[i]; 

	int ans = 1 + getMaxRec(str, i + 1, n,lookup); 

	if (i + 1 < n) 
	{ 

	if (str[i] != str[i+1]) 
		ans = max(4 + getMaxRec(str, i + 2,n, lookup), ans); 

	else ans = max(3 + getMaxRec(str, i + 2,n, lookup), ans); 
	} 

	return lookup[i] = ans; 
} 

int getMaxWeight(string str) 
{ 
	int n = str.length(); 

	// initialization of lookup table 
	int lookup[n]; 
	memset(lookup, -1, sizeof lookup); 

	// function of recursive call
	return getMaxRec(str, 0, str.length(),lookup); 
} 

// main function
int main() 
{ 
	string str;
	cin>>str;
	cout << getMaxWeight(str); 
	return 0; 
} 
