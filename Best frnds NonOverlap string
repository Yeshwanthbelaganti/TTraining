Laxman and hari are the best friends. Laxman asked Hari to find out the longest repeating non-overlapping substring of the input which he has given, 
which is find 2 identical substrings of maximum length which do not overlap. If there exists more than one such substring return any of them.
Ex:
If the input is fourtyfour
output : four is a identical substring of maximum length found in the input string,
=========================================================================================================================
import java.util.Scanner;
class GFG { 

    static String longestRepeatedSubstring(String str) { 
        int n = str.length(); 
        int LCSRe[][] = new int[n + 1][n + 1]; 
  
        String res = ""; // To store result  
        int res_length = 0; // To store length of result  
  
        // building table in bottom-up manner  
        int i, index = 0; 
        for (i = 1; i <= n; i++) { 
            for (int j = i + 1; j <= n; j++) { 
                // (j-i) > LCSRe[i-1][j-1] to remove  
                // overlapping  
                if (str.charAt(i - 1) == str.charAt(j - 1) 
                        && LCSRe[i - 1][j - 1] < (j - i)) { 
                    LCSRe[i][j] = LCSRe[i - 1][j - 1] + 1; 
  

                    if (LCSRe[i][j] > res_length) { 
                        res_length = LCSRe[i][j]; 
                        index = Math.max(i, index); 
                    } 
                } else { 
                    LCSRe[i][j] = 0; 
                } 
            } 
        } 

        if (res_length > 0) { 
            for (i = index - res_length + 1; i <= index; i++) { 
                res += str.charAt(i - 1); 
            } 
        } 
  
        return res; 
    } 
  
    public static void main(String[] args) { 
        Scanner in=new Scanner(System.in);
        String str=in.next(); 
        System.out.println(longestRepeatedSubstring(str)); 
    } 
} 
