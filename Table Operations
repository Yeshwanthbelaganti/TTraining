Simon has a rectangular table consisting of n rows and m columns. 
Simon numbered the rows of the table from top to bottom starting from one and the columns — from left to right starting from one.
We'll represent the cell on the x-th row and the y-th column as a pair of numbers (x, y). The table corners are cells: (1, 1), (n, 1), (1, m), (n, m).
Simon thinks that some cells in this table are good. Besides, it's known that no good cell is the corner of the table.
Initially, all cells of the table are colorless. Simon wants to color all cells of his table. 
In one move, he can choose any good cell of table (x1, y1), an arbitrary corner of the table (x2, y2) and color all cells of the table (p, q), 
which meet both inequations: min(x1, x2) ≤ p ≤ max(x1, x2), min(y1, y2) ≤ q ≤ max(y1, y2).
---------------------------------------------------------------------------------------------------------------
#include<stdio.h>
int main()
{
    int n,m,i,j;
    scanf("%d",&n);
    scanf("%d",&m);
    int table[n][m];
    for(i=0;i<n;i++)
    {
        for(j=0;j<m;j++)
        {
            scanf("%d",&table[i][j]);
        }
    }
    printf("Minimum operations = ");
    for(i=0;i<n;i++)
    {
        for(j=0;j<m;j++)
        {
            if(table[i][j]==1)
            {
                if((i==0)||(i==n-1)||(j==0)||(j==m-1))
                {
                    printf("2");
                    j=m;i=n;
                }
                else {printf("4");j=m;i=n;}
            }
        }
    }
    return 0;
}
