There is a big fight between a computer programmer and chess master, Chess master challenged the programmer. 
The challenge is, given an N x N chessboard and a Knight at position (x,y). 
The Knight has to take exactly K steps, where at each step it chooses any of the 8 directions uniformly at random.
Programmer has to find out the probability that the Knight remains in the chessboard after taking K steps, with the condition that it canâ€™t enter the board again once it leaves it.
---------------------------------------------------------------------------------------------
#include <bits/stdc++.h> 
using namespace std;
#define N 8  
int dx[] = { 1, 2, 2, 1, -1, -2, -2, -1 }; 
int dy[] = { 2, 1, -1, -2, -2, -1, 1, 2 }; 


bool inside(int x, int y) 
{ 
	return (x >= 0 and x < N and y >= 0 and y < N); 
}  
double findProb(int start_x, int start_y, int steps) 
{ 
	// initialising array 
	double dp1[N][N][N]; 

	for (int i = 0; i < N; ++i) 
		for (int j = 0; j < N; ++j) 
			dp1[i][j][0] = 1; 
	for (int s = 1; s <= steps; ++s) 
	{ 
		for (int x = 0; x < N; ++x) 
		{ 
			for (int y = 0; y < N; ++y) 
			{ 
				double prob = 0.0; 

				for (int i = 0; i < 8; ++i) 
				{ 
					int nx = x + dx[i]; 
					int ny = y + dy[i]; 
					if (inside(nx, ny)) 
						prob += dp1[nx][ny][s-1] / 8.0; 
				} 

				//storing the result 
				dp1[x][y][s] = prob; 
			} 
		} 
	}  
	return dp1[start_x][start_y][steps]; 
} 

//main function
int main() 
{ 
	int n;
	cin>>n;

	cout << findProb(0, 0, n) << endl; 

	return 0; 
} 
