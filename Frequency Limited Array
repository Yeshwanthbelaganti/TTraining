Given an sorted array of positive integers, count number of occurrences for each element in the array. Assume all elements in the array are less than some constant M.
Do this without traversing the complete array. i.e. expected time complexity is less than O(n).
--------------------------------------------------------------------------------------------------------------
 #include <iostream> 
#include <vector> 
using namespace std; 
void findFrequencyUtil(int arr[], int low, int high, 
					vector<int>& freq) 
{ 
	
	if (arr[low] == arr[high]) { 
	
		freq[arr[low]] += high - low + 1; 
	} 
	else { 
	 
		int mid = (low + high) / 2; 
		findFrequencyUtil(arr, low, mid, freq); 
		findFrequencyUtil(arr, mid + 1, high, freq); 
	} 
} 

 
void findFrequency(int arr[], int n) 
{ 
	
	vector<int> freq(arr[n - 1] + 1, 0); 

	
	findFrequencyUtil(arr, 0, n - 1, freq); 

	// Print the frequencies 
	for (int i = 0; i <= arr[n - 1]; i++) 
		if (freq[i] != 0) 
			cout << "Element " << i << " occurs "
				<< freq[i] << " times" << endl; 
} 


int main() 
{ 
	int n;
    cin>>n;
	int arr[n];
	for(int i=0;i<n;i++)
	{
	    cin>>arr[i];
	} 

	findFrequency(arr, n); 

	return 0; 
} 
