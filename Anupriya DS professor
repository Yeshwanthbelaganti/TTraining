Anupriya is a professor, she trained in a Data structure subject. 
One day she has given a problem statement to his students that she will be given n and her students wants to find how many distinct Max Heap can be made from n distinct integers.
For Ex:
Input : n = 3
Output : Assume the integers are 1, 2, 3.
Then the 2 possible max heaps are:    
      3
      / \
    1   2
      3
     / \
    2   1
  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
  #include <iostream> 
using namespace std; 
#define MAXN 105
// dp[i] = number of max heaps for i distinct integers 
int dp[MAXN]; 
int nck[MAXN][MAXN]; 
int log2[MAXN]; 
int choose(int n, int k) 
{ 
	if (k > n) 
		return 0; 
	if (n <= 1) 
		return 1; 
	if (k == 0) 
		return 1; 

	if (nck[n][k] != -1) 
		return nck[n][k]; 

	int answer = choose(n - 1, k - 1) + choose(n - 1, k); 
	nck[n][k] = answer; 
	return answer; 
} 

// calculate l for give value of n 
int getLeft(int n) 
{ 
	if (n == 1) 
		return 0; 

	int h = log2[n]; 
	int numh = (1 << h); //(2 ^ h) 

	// number of elements that are actually present in last level(hth level) 
	int last = n - ((1 << h) - 1); 

	// if more than half-filled 
	if (last >= (numh / 2)) 
		return (1 << h) - 1; // (2^h) - 1 
	else
		return (1 << h) - 1 - ((numh / 2) - last); 
} 

// finding the maximum number of heaps for n 
int numberOfHeaps(int n) 
{ 
	if (n <= 1) 
		return 1; 

	if (dp[n] != -1) 
		return dp[n]; 

	int left = getLeft(n); 
	int ans = (choose(n - 1, left) * numberOfHeaps(left)) * 
							(numberOfHeaps(n - 1 - left)); 
	dp[n] = ans; 
	return ans; 
} 

// array initialization
int solve(int n) 
{ 
	for (int i = 0; i <= n; i++) 
		dp[i] = -1; 

	for (int i = 0; i <= n; i++) 
		for (int j = 0; j <= n; j++) 
			nck[i][j] = -1; 

	int currLog2 = -1; 
	int currPower2 = 1; 

	//logarithm function
	for (int i = 1; i <= n; i++) { 
		if (currPower2 == i) { 
			currLog2++; 
			currPower2 *= 2; 
		} 
		log2[i] = currLog2; 
	} 

	return numberOfHeaps(n); 
} 

// main function
int main() 
{ 
	int n;
	cin>>n;
	cout << solve(n) << endl; 
	return 0; 
} 
