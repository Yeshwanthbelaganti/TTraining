Robert is given a string that ends with a character or a number. 
He has to check the length of the given string and append it to the end in such a way that if the original string ends with a number then the new string with the appended value must have length of the string as the last two characters. 
If the string ends with a character then append the total length as the last character.
Also, the number to be appended must be a single positive digit. Write a code to implement the given scenario.
---------------------------------------------------------------------------------------------------------------------
#include <bits/stdc++.h> 
using namespace std; 
int find_digit(char* s, int n)
{ 
  
    int first_digit = -1; 
    for (int i = n - 1; i >= 0; i--) { 
        if (s[i] < '0' || s[i] > '9') { 
            first_digit =i; 
            break; 
        } 
    } 
    first_digit++; 
  
    int s_len = first_digit; 
 
    int num = 0, pw = 1; 
    int i = n - 1; 
    while (i >= 0) { 
  
        // If current character is 
        // a numeric digit 
        if (s[i] >= '0' && s[i] <= '9') { 
  
            // Get the current digit 
            int digit = s[i] - '0'; 
  
            // Build the number 
            num = num + (pw * digit); 
  
            // If number exceeds the length 
            if (num >= s_len) 
                return -1; 
  
            // Next power of 10 
            pw = pw * 10; 
        } 
        i--; 
    } 
  
    // Append 0 in the end 
    num = num * 10; 
  
    // Required number that must be added 
    int req = s_len - num; 
  
    // If number is not a single digit 
    if (req > 9 || req < 0) 
        return -1; 
    return req; 
} 
  
// Driver code 
int main() 
{ 
    char s[100];
    scanf("%s", &s);
    int n = strlen(s);
    printf("%d", find_digit(s, n));
   
    return 0; 
} 
