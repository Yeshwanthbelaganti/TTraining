Given an array arr[0 â€¦ n-1] containing n positive integers, a subsequence of arr[] is called Bitonic if it is first increasing, then decreasing. 
Write a function that takes an array as argument and returns the length of the longest bitonic subsequence.
A sequence, sorted in increasing order is considered Bitonic with the decreasing part as empty. 
Similarly, decreasing order sequence is considered Bitonic with the increasing part as empty.
Implement the logic using Pointers.
====================================================================================================
#include<stdio.h> 
#include<stdlib.h> 
int lbs( int arr[], int n ) 
{ 
int i, j; 
int *lis = new int[n]; 
for (i = 0; i < n; i++) 
	lis[i] = 1; 
for (i = 1; i < n; i++) 
	for (j = 0; j < i; j++) 
		if (arr[i] > arr[j] && lis[i] < lis[j] + 1) 
			lis[i] = lis[j] + 1; 
int *lds = new int [n]; 
for (i = 0; i < n; i++) 
	lds[i] = 1; 
for (i = n-2; i >= 0; i--) 
	for (j = n-1; j > i; j--) 
		if (arr[i] > arr[j] && lds[i] < lds[j] + 1) 
			lds[i] = lds[j] + 1; 
int max = lis[0] + lds[0] - 1; 
for (i = 1; i < n; i++) 
	if (lis[i] + lds[i] - 1 > max) 
		max = lis[i] + lds[i] - 1; 
return max; 
} 
int main() 
{ 
    int n;
    scanf("%d",&n);
int arr[n];
for(int i=0;i<n;i++)
{
    scanf("%d",&arr[i]);
}
printf("%d", lbs( arr, n ) ); 
return 0; 
} 
