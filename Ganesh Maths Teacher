Ganesh is a maths teacher, he gives a problem statement to his/her students to solve it. The question is, a number can always be represented as a sum of squares of other numbers.
Note that 1 is a square and we can always break a number as (1*1 + 1*1 + 1*1 + â€¦). Given a number n, the task is to find the minimum number of squares that sum to n.
For Ex:
Input: n = 100
Output: 1
100 can be written as 102. Note that 100 can also be written as 52 + 52 + 52 + 52, but this representation requires 4 squares. 
So,the output is 1 since we have single square of 10 to satisfied the condition(minimum number of squares that sum up to n.).
===================================================================================================================================================
#include <bits/stdc++.h> 
using namespace std; 
int getMinSquares(int n) 
{ 
	int* dp = new int[n + 1]; 

	dp[0] = 0; 
	dp[1] = 1; 
	dp[2] = 2; 
	dp[3] = 3; 

	for (int i = 4; i <= n; i++) { 
		dp[i] = i; 

		for (int x = 1; x <= ceil(sqrt(i)); x++) { 
			int temp = x * x; 
			if (temp > i) 
				break; 
			else
				dp[i] = min(dp[i], 1 + dp[i - temp]); 
		} 
	} 
	int res = dp[n]; 
	delete[] dp; 

	return res; 
} 

// main program 
int main() 
{ 
    int n;
    cin>>n;
	cout << getMinSquares(n); 
	return 0; 
} 
