itesh is very interested doing string operations. He have two strings of lower alphabet characters. 
He need to find the number of ways to insert a character in the first string such that length of LCS(Longest Common Subsequence) of both strings increases by one.
For Ex:
String 1: abab
String 2 : abc
Output: 3
LCS length of given two strings is 2
There are three ways of insertion in string1, to increase the LCS length by one which are placed below,
String 1 ="abcab" String 2="abc" LCS length=3
String 1="abacb" String 2="abc" LCS length=3
String 1="ababc" String 2="abc" LCS length=3
===================================================================================================================
#include <bits/stdc++.h> 
using namespace std; 

#define M 26 
int toInt(char ch) 
{ 
	return (ch - 'a'); 
} 

int waysToIncreaseLCSBy1(string str1, string str2) 
{ 
	int m = str1.length(), n = str2.length(); 

	vector<int> position[M]; 
	for (int i = 1; i <= n; i++) 
		position[toInt(str2[i-1])].push_back(i); 

	int lcsl[m + 2][n + 2]; 
	int lcsr[m + 2][n + 2]; 

	for (int i = 0; i <= m+1; i++) 
		for (int j = 0; j <= n + 1; j++) 
			lcsl[i][j] = lcsr[i][j] = 0; 
	for (int i = 1; i <= m; i++) 
	{ 
		for (int j = 1; j <= n; j++) 
		{ 
			if (str1[i-1] == str2[j-1]) 
				lcsl[i][j] = 1 + lcsl[i-1][j-1]; 
			else
				lcsl[i][j] = max(lcsl[i-1][j], 
								lcsl[i][j-1]); 
		} 
	} 
	for (int i = m; i >= 1; i--) 
	{ 
		for (int j = n; j >= 1; j--) 
		{ 
			if (str1[i-1] == str2[j-1]) 
				lcsr[i][j] = 1 + lcsr[i+1][j+1]; 
			else
				lcsr[i][j] = max(lcsr[i+1][j], 
								lcsr[i][j+1]); 
		} 
	} 
	int ways = 0; 
	for (int i=0; i<=m; i++) 
	{ 
		for (char c='a'; c<='z'; c++) 
		{
			for (int j=0; j<position[toInt(c)].size(); j++) 
			{ 
				int p = position[toInt(c)][j]; 
				if (lcsl[i][p-1] + lcsr[i+1][p+1] == lcsl[m][n]) 
					ways++; 
			} 
		} 
	} 

	return ways; 
} 

// Driver code to test above methods 
int main() 
{ 
	string str1; 
	string str2; 
	cin>>str1;
	cin>>str2;
	cout << waysToIncreaseLCSBy1(str1, str2); 
	return 0; 
} 
